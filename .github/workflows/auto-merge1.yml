name: Auto Merge

on:
  workflow_run:
    workflows:
      - Workflow 1
  
    types:
      - completed

jobs:
  ensure-approvals:
    runs-on: ubuntu-latest
    permissions:
      contents: read       # Read access to repository contents
      pull-requests: write # Required to list PR reviews and merge PRs

    steps:
      - name: Debug Event Payload
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            console.log("Event Payload:", JSON.stringify(context.payload, null, 2));

      - name: Ensure Required Approvals
        id: approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            if (!context.payload.pull_request) {
              console.log("No pull request found in the event payload. Exiting.");
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            // Filter for approved reviews
            const approvedReviews = reviews.filter(review => review.state === "APPROVED");
            const requiredApprovals = 2; // Adjust the number of required approvals here

            console.log(`Found ${approvedReviews.length} approval(s). Required: ${requiredApprovals}.`);

            if (approvedReviews.length < requiredApprovals) {
              core.setFailed(`Pull request requires at least ${requiredApprovals} approval(s).`);
            } else {
              console.log("All required approvals are in place.");
            }

      - name: Merge Pull Request
        if: ${{ steps.approvals.outcome == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number;

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number,
            });

            if (pr.mergeable_state !== "clean") {
              console.log(`Pull request is not in a clean state for merging. State: ${pr.mergeable_state}`);
              core.setFailed("Cannot merge pull request because it is not in a clean state.");
              return;
            }

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number,
              merge_method: "squash", # Change to "merge" or "rebase" if needed
              commit_title: "Auto-merged by GitHub Actions after approval checks",
            });

            console.log("Pull request merged successfully.");
